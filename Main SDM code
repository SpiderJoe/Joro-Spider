# libraries
library(Rcpp);library(data.table);library(rgbif);library(sdm);library(dismo);library(dplyr);library(mapview);library(rJava);library(raster);#library(rgdal);library(ggplot2);library(sp);library(usdm);library(tidyr);library(ecospat);library(ENMeval)

#load variables
bio<-stack('F:/2.5min_global_chelsa-derived_1988-2018_biovars1-19.tif')

#crop to North America (northam) and Asia (native)
dev.new()
plot(bio[[1]])
native<-drawExtent()
northam<-drawExtent()

##################################################################################################################################################################################################################

#preparing buffer zone
#load occurrences and prepare predictors
#Citation (occurrences) GBIF.org (31 January 2024) GBIF Occurrence Download  https://doi.org/10.15468/dl.gwxypy

raw_occurrences<-read.csv('C:/SDMs/1988-2023-Trichonephila_clavata-30-Jan-2024-1kmUncertainty-20kmthin_thin1.csv') 
raw_occurrences <- raw_occurrences %>% dplyr::select(lon,lat)
raw_occurrences$species <- 1                    
raw_occurrences <- raw_occurrences %>% drop_na()           
coordinates(raw_occurrences) <- c('lon','lat')  
sppf<-raw_occurrences #redundant rename but necessary for now
sppg<-raw_occurrences #redundant
crs(sppf)<-crs(bio)
crs(sppg)<-crs(bio)
occs.sf <- sf::st_as_sf(sppf, coords = c("longitude","latitude"), crs = raster::crs(bio))
eckertIV <- "+proj=eck4 +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs"
occs.sf <- sf::st_transform(occs.sf, crs = eckertIV)

# Buffer occurrences by 500 km = 500000 m radius 
occs.buf <- sf::st_buffer(occs.sf, dist = 500000) %>% sf::st_union() %>% sf::st_sf() %>% sf::st_transform(crs = raster::crs(bio[[1]]))
# Plot buffer; check
plot(bio[[1]])
points(sppf)
plot(occs.buf, border = "blue", lwd = 3, add = TRUE)
#create a buffered subset for model building
sdmvars<- raster::crop(bio,occs.buf)
sdmvars<- raster::mask(sdmvars, occs.buf)
raw_occurrences <- crop(raw_occurrences,extent(sdmvars))

##################################################################################################################################################################################################################

#Collinearity assessment using USDM package # Naimi, B., Hamm, N. A., Groen, T. A., Skidmore, A. K., & Toxopeus, A. G. (2014). Where is positional uncertainty a problem for species distribution modelling?. Ecography, 37(2), 191-203.
ex <- raster::extract(potential_variables,sppg) 
v <- vifstep(ex)                      #combination where all are less than default (10)
biocR<-exclude(potential_variables,v) #exclude to the group that satisfies VIF requirement
ex2<-raster::extract(biocR,sppg)      
vcor<-usdm::vifcor(ex2, th=0.7)       #reduce variables so none are greater than 0.70 for PCC
biocT<-exclude(biocR,vcor)            #exclude; any remaining variables are therefore VIF<10 PCC<0.7
sdmvars_noncol<-biocT                 #rename

##################################################################################################################################################################################################################

#reload occs
spDg<-read.csv('C:/SDMs/1988-2023-Trichonephila_clavata-30-Jan-2024-1kmUncertainty-20kmthin_thin1.csv') 
Cnine<-spDg[2:3]
names(Cnine)<-c('x','y')

#chop up occurrences and predictors to isolate NorthAm and Native models
Cniner<-Cnine
coordinates(Cniner) <- ~x+y
CnineNA<-crop(Cniner,northam)
CnineNAtive<-crop(Cniner,native)
CnineNA <- as.data.frame(CnineNA)
CnineNAtive <- as.data.frame(CnineNAtive)

#(for continental and global predictions)
NApreds<-exclude(bio,vcor)
North_America<-crop(NApreds,northam)
Native_range<-crop(NApreds, native)

#buffered zones for model training
sdmvars_noncolNA<-crop(sdmvars_noncol,northam)
sdmvars_noncolNAtive<-crop(sdmvars_noncol,native)

#background points for each extent  # Hijmans, R. J., Phillips, S., Leathwick, J., Elith, J., & Hijmans, M. R. J. (2017). Package ‘dismo’. Circles, 9(1), 1-68.
background<-randomPoints(sdmvars_noncol[[1]],10000)
backgroundNA<-randomPoints(sdmvars_noncolNA[[1]],10000)
backgroundNAtive<-randomPoints(sdmvars_noncolNAtive[[1]],10000)

##################################################################################################################################################################################################################
##################################################################################################################################################################################################################

#Building models 
#ENMeval: Kass, J. M., Muscarella, R., Galante, P. J., et al. (2021). ENMeval 2.0: Redesigned for customizable and reproducible modeling of species’ niches and distributions. Methods in Ecology and Evolution, 12(9), 1602-1608.
#ENMeval: Muscarella, R., Galante, P. J., Soley‐Guardia, M., et al. (2014). ENMeval: An R package for conducting spatially independent evaluations and estimating optimal model complexity for Maxent ecological niche models. Methods in ecology and evolution, 5(11), 1198-1205.

#[global] model with all occurrences
#Clamping is OFF; Block cross-validation used for model building;
#RM's 1-5 considered (1-unit increments); linear, quadratic, hinge, linear-quadratic and linear-quadratic-hinge, considered.
e.mx_noncol <- ENMevaluate(occs = Cnine, envs = sdmvars_noncol, bg = background, 
                           algorithm = 'maxent.jar', partitions = 'block', clamp = F,
                           parallel = TRUE, tune.args = list(fc = c("L","LQ","Q","LQH","H"), rm = 1:5))
#model results
evalres_noncol <- eval.results(e.mx_noncol)

#Identify model where delta AICc equals 0 (lowest AICc score)
opt_aicc_noncol  <- evalres_noncol  %>% filter(delta.AICc ==0)
opt_aicc_noncol  

#Select model with lowest AIC
model_AICc_noncol  <- eval.models(e.mx_noncol)[[opt_aicc_noncol$tune.args]]
plot(model_AICc_noncol, type = "cloglog")
model_AICc_noncol@results

#Response variables
dismo::response(eval.models(e.mx_noncol)[[opt_aicc_noncol$tune.args]])

#predictions in buffer 
#make the prediction
pred_AICc_noncol <- eval.predictions(e.mx_noncol)[[opt_aicc_noncol$tune.args]]
cc <- colorRampPalette(c( 'grey90',"yellow","orange","purple4"))
plot(pred_AICc_noncol, col=cc(100))

##################################################################################################################################################################################################################

#[native] model building
#same as above but occs, envs, and bg are restricted to east Asia.
e.mx_noncolNAtive <- ENMevaluate(occs = CnineNAtive, envs = sdmvars_noncolNAtive, bg = backgroundNAtive, 
                                 algorithm = 'maxent.jar', partitions = 'block', clamp = F,
                                 parallel = TRUE, tune.args = list(fc = c("L","LQ","Q","LQH","H"), rm = 1:5))
evalres_noncolNAtive <- eval.results(e.mx_noncolNAtive)
opt_aicc_noncolNAtive  <- evalres_noncolNAtive  %>% filter(delta.AICc ==0)
model_AICc_noncolNAtive  <- eval.models(e.mx_noncolNAtive)[[opt_aicc_noncolNAtive$tune.args]]
plot(model_AICc_noncolNAtive, type = "cloglog")
model_AICc_noncolNAtive@results
dismo::response(eval.models(e.mx_noncolNAtive)[[opt_aicc_noncolNAtive$tune.args]])
pred_AICc_noncolNAtive <- eval.predictions(e.mx_noncolNAtive)[[opt_aicc_noncolNAtive$tune.args]]
plot(pred_AICc_noncolNAtive, col=cc(100))

##################################################################################################################################################################################################################

#[invasive; North America] model building]
e.mx_noncolNA <- ENMevaluate(occs = CnineNA, envs = sdmvars_noncolNA, bg = backgroundNA, 
                             algorithm = 'maxent.jar', partitions = 'block', clamp = F,
                             parallel = TRUE, tune.args = list(fc = c("L","LQ","Q","LQH","H"), rm = 1:5))
e.mx_noncolNA
evalres_noncolNA <- eval.results(e.mx_noncolNA)
opt_aicc_noncolNA  <- evalres_noncolNA  %>% filter(delta.AICc ==0)
opt_aicc_noncolNA 
model_AICc_noncolNA  <- eval.models(e.mx_noncolNA)[[opt_aicc_noncolNA$tune.args]]
plot(model_AICc_noncolNA, type = "cloglog")
model_AICc_noncolNA@results
dismo::response(eval.models(e.mx_noncolNA)[[opt_aicc_noncolNA$tune.args]])
pred_AICc_noncolNA <- eval.predictions(e.mx_noncolNA)[[opt_aicc_noncolNA$tune.args]]
plot(pred_AICc_noncolNA, col=cc(100))


##################################################################################################################################################################################################################


# Predictions outside the buffered training area
North_America_preds_from_global<-dismo::predict(eval.models(e.mx_noncol)[[opt_aicc_noncol$tune.args]], North_America)
North_America_preds_from_NA_invasive<-dismo::predict(eval.models(e.mx_noncolNA)[[opt_aicc_noncolNA$tune.args]], North_America)
North_America_preds_from_Native<-dismo::predict(eval.models(e.mx_noncolNAtive)[[opt_aicc_noncolNAtive$tune.args]], North_America)
Native_preds_from_Native<-dismo::predict(eval.models(e.mx_noncolNAtive)[[opt_aicc_noncolNAtive$tune.args]], Native_range)
Global_preds_to_Native_range<-dismo::predict(eval.models(e.mx_noncol)[[opt_aicc_noncol$tune.args]], Native_range)
Native_preds_from_NA_invasive<-dismo::predict(eval.models(e.mx_noncolNA)[[opt_aicc_noncolNA$tune.args]], Native_range)
world_colonizing_phase<-dismo::predict(eval.models(e.mx_noncol)[[opt_aicc_noncol$tune.args]], NApreds)
plot(world_colonizing_phase, col=cc(200))

#Binarize predictions
North_America_preds_from_global50<-raster(North_America_preds_from_global)
North_America_preds_from_global50[]<-ifelse(North_America_preds_from_global[] >= 0.5,20,0)
North_America_preds_from_NA_invasive50<-raster(North_America_preds_from_NA_invasive)
North_America_preds_from_NA_invasive50[]<-ifelse(North_America_preds_from_NA_invasive[] >= 0.5,3,0)
North_America_preds_from_Native50<-raster(North_America_preds_from_Native)
North_America_preds_from_Native50[]<-ifelse(North_America_preds_from_Native[]>=0.5,5,0)
Native_preds_from_Native50<-raster(Native_preds_from_Native)
Native_preds_from_Native50[]<-ifelse(Native_preds_from_Native[] >= 0.5,20,0)
Global_preds_to_Native_range50<-raster(Global_preds_to_Native_range)
Global_preds_to_Native_range50[]<-ifelse(Global_preds_to_Native_range[] >= 0.5,3,0)
Native_preds_from_NA_invasive50<-raster(Native_preds_from_NA_invasive)
Native_preds_from_NA_invasive50[]<-ifelse(Native_preds_from_NA_invasive[]>=0.5,5,0)

#North American and East Asian invasive stages
North_America_overlap<-North_America_preds_from_Native50+North_America_preds_from_NA_invasive50+North_America_preds_from_global50
Native_Asian_overlap<-Native_preds_from_Native50+Global_preds_to_Native_range50+Native_preds_from_NA_invasive50

#plots
phase_colors<-colorRampPalette(c('grey90',"magenta","magenta","magenta","magenta","magenta","yellow","yellow","yellow",'yellow','cyan','cyan','cyan'))
plot(total_preds,col=phase_colors(100))
plot(world_colonizing_phase,col=cc(100))

##################################################################################################################################################################################################################

#Cut to smaller focal areas (eastern US, eastern Asia, Japan/Taiwan/SouthKorea)
easUS<-drawExtent()
tinycutnative<-drawExtent()
japan<-drawExtent

#focal plots
phase_colors2<-colorRampPalette(c('grey90',"yellow","yellow",'yellow','yellow',"yellow",'yellow','magenta','cyan'))
easUSpredictions<-crop(total_preds,easUS)
us_regional_predstotal_preds<-crop(us_regional_predstotal_preds,easUS)
native_regional_predstinycut<-crop(native_regional_preds,tinycutnative)
nativejapoana<-crop(native_regional_preds,japan)

plot(easUSpredictions,col=phase_colors(100))
plot(native_regional_predstinycut, col=phase_colors2(100))
plot(nativejapoana, col=phase_colors2(100))

#Global predictions with graded suitability for clearer visualizations
world_colonizing_phase50<-raster(world_colonizing_phase)
world_colonizing_phase50[]<-ifelse(world_colonizing_phase[] >= 0.5,1,0)
world_colonizing_phase75<-raster(world_colonizing_phase)
world_colonizing_phase75[]<-ifelse(world_colonizing_phase[] >= 0.75,1,0)
world_colonizing_phase25<-raster(world_colonizing_phase)
world_colonizing_phase25[]<-ifelse(world_colonizing_phase[] >= 0.25,1,0)
world_colonizing_phase125<-raster(world_colonizing_phase)
world_colonizing_phase125[]<-ifelse(world_colonizing_phase[] >= 0.125,1,0)
cut_a_rug <- world_colonizing_phase75 + world_colonizing_phase50 + world_colonizing_phase25 + world_colonizing_phase125
ccr <- colorRampPalette(c( 'grey90',"yellow","orange","red"))
plot(cut_a_rug, col=ccr(100))


############################################################################################################################################################################################################################
#alternative approach using sdm (R package)
library(sdm)
installAll()

dSz <- sdmData(species~., Cnine, predictors=sdmvars_noncol, bg = list(method='gRandom', n=10000))  
mSz_quadratic<- sdm(species~.,dSz,methods=c('maxent'),modelSettings = list(maxent = list(feat = c("quadratic"))),replication=c('cv'), cv.folds=4,n=5,parallelSettings=list(ncore=4,method='parallel')) #Feng et al. 2019 used 4-fold CV with MaxEnt
mSz_linear<- sdm(species~.,dSz,methods=c('maxent'),modelSettings = list(maxent = list(feat = c("linear"))),replication=c('cv'), cv.folds=4,n=5, parallelSettings=list(ncore=4,method='parallel'))
mSz_hinge<- sdm(species~.,dSz,methods=c('maxent'),modelSettings = list(maxent = list(feat = c("hinge"))),replication=c('cv'), cv.folds=4,n=5, parallelSettings=list(ncore=4,method='parallel'))
mSz_linquad<- sdm(species~.,dSz,methods=c('maxent'),modelSettings = list(maxent = list(feat = c("linear","quadratic"))),replication=c('cv'), cv.folds=4,n=5, parallelSettings=list(ncore=4,method='parallel'))
mSz_linquadhinge<- sdm(species~.,dSz,methods=c('maxent'),modelSettings = list(maxent = list(feat = c("linear","quadratic","hinge"))),replication=c('cv'), cv.folds=4,n=5, parallelSettings=list(ncore=4,method='parallel'))
eSz <- ensemble(mSz_linquadhinge, NApreds, setting=list(method='weighted', stat='AUC'), id=id)
